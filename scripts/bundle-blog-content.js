import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

const contentDirectory = path.join(process.cwd(), 'content/blog');
const outputFilePath = path.join(process.cwd(), 'src/lib/blog-data.js');

console.log('开始捆绑博客内容...');

try {
  const files = fs.readdirSync(contentDirectory);
  
  const posts = files
    .filter(file => file.endsWith('.md'))
    .map(file => {
      const slug = file.replace(/\.md$/, '');
      const fullPath = path.join(contentDirectory, file);
      const fileContents = fs.readFileSync(fullPath, 'utf8');
      const { data, content } = matter(fileContents);
      
      // 只包含需要的数据，避免捆绑过多内容
      return {
        slug,
        frontMatter: {
          title: data.title || 'Untitled',
          date: data.date || new Date().toISOString(),
          description: data.description || '',
          tags: data.tags || [],
        },
        content // 包含内容，以便在博客页面显示
      };
    })
    .sort((a, b) => {
      // 按日期降序排序
      return new Date(b.frontMatter.date).getTime() - new Date(a.frontMatter.date).getTime();
    });

  // 确保输出目录存在
  const outputDir = path.dirname(outputFilePath);
  if (!fs.existsSync(outputDir)){
      fs.mkdirSync(outputDir, { recursive: true });
  }
    
  // 将数据写入 JS 文件
  const outputContent = `// This file is generated by scripts/bundle-blog-content.js
// Do not edit this file directly.

export const allBlogPosts = ${JSON.stringify(posts, null, 2)};
`;

  fs.writeFileSync(outputFilePath, outputContent, 'utf8');
  
  console.log(`博客内容已成功捆绑到: ${outputFilePath}`);

} catch (error) {
  console.error('捆绑博客内容时出错:', error);
  process.exit(1); // 出错时退出，避免后续构建使用旧数据
} 